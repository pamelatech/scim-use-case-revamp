<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.3.5) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-correia-scim-use-cases-01" category="info" submissionType="IETF">
  <front>
    <title abbrev="SCIM Use Cases">System for Cross-domain Identity Management: Definitions, Overview, Concepts, and Requirements</title>

    <author initials="P. J." surname="Correia" fullname="Paulo Jorge Correia">
      <organization>Cisco Systems</organization>
      <address>
        <email>paucorre@cisco.com</email>
      </address>
    </author>
    <author initials="P." surname="Dingle" fullname="Pamela Dingle">
      <organization>Microsoft Corporation</organization>
      <address>
        <email>pamela.dingle@microsoft.com</email>
      </address>
    </author>

    <date year="2024" month="October" day="21"/>

    
    <workgroup>SCIM</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>SCIM</keyword>

    <abstract>


<?line 41?>

<t>This document provides definitions, overview and selected use cases of the System for Cross-domain Identity Management (SCIM).  It lays out the system's concepts, models, and flows, and it includes use cases, and implementation considerations.</t>



    </abstract>



  </front>

  <middle>


<?line 45?>

<section anchor="introduction"><name>Introduction</name>
<t>The System for Cross-domain Identity Management (SCIM) family of specifications <xref target="RFC7643"></xref> and <xref target="RFC7644"></xref> is designed to manage resources used in the practice of identity management that need to be communicated across internet domains and services, with users and groups as the default resources supported (and an extensibility model for additional resource definitions).
The specifications have two primary goals:
 1. A common representation of a resource object and its attributes.
 2. Standardized patterns for how those resources can be operated on, including "CRUD" operations (Create, Read, Update, Delete) for resource objects and more advanced goals such as search filters, synchronization of large resource populations, etc.
These goals are codified as a data model in <xref target="RFC7643"></xref>, which defines resources, attributes, and default schemas, as well as a protocol definition built on HTTP in <xref target="RFC7644"></xref>. By standardizing the data model and protocol for resource management, entire ecosystems can achieve better interoperability, security, and scalability.</t>

<t>This document provides definitions, overviews, concepts, flows, and use cases that implementers may need to understand the design and applicability of the SCIM schema <xref target="RFC7643"></xref> and SCIM protocol <xref target="RFC7644"></xref>. Unlike some protocols like Application Bridging for Federated Access Beyond Web (ABFAB) and SAML2 WebSSO, SCIM provides provisioning and de-provisioning of resources in a separate context from authentication. While SCIM is a protocol that standardizes the movement of data only between two parties in an HTTP client-server model, this document discusses implementation patterns that use concepts beyond the core schema and protocol, which are necessary to understand how SCIM actions can fit into larger architectures.</t>

</section>
<section anchor="terminology"><name>Terminology</name>
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> when they appear in ALL CAPS. These words may also appear in this document in lowercase as plain English words, absent their normative meanings. Here is a list of acronyms and abbreviations used in this document:
 * CRUD: Create, Read, Update, Delete
 * ERC: External Resource Creator 
 * IaaS: Infrastructure as a Service
 * IDaaS: Identity as a Service
 * IdM: Identity Manager
 * JIT: Just In Time
 * RC: Resource Creator
 * RU: Resource Updater
 * RM: Resource Manager 
 * RS: Resource Subscriber 
 * RO: Resource Object 
 * RA: Resource Attribute 
 * SaaS: Software as a Service
 * SAML: Security Assertion Markup Language
 * SCIM: System for Cross-domain Identity Management
 * SET: Security Event Token
 * SSO: Single Sign-On</t>

</section>
<section anchor="scim-components-and-architecture"><name>SCIM Components and Architecture</name>
<t>The SCIM architecture is a client-server model centered on a normative concept of a "resource." Resources have types (such as a user or a group), and each unique instance of a resource type is represented by a JSON object, accessed via a standardized REST API. Each resource object can be managed individually or in bulk using actions that by default are specified in <eref target="HTTP GET, PUT, POST, etc.">RFC9110</eref>, but may also expand to concepts in extension documents, such as security event tokens (SETs). This model enables organizations to represent information about user populations and the groups those user populations are part of using the core specifications, and to extend to other important resources using extension drafts in the same family, with the high-level concept of performing SCIM actions on resource objects. SCIM actions result in resource objects and associated data "moving" between the client and server, as clients actively push and pull information that reflects changes over time. This communication of data enables systems within domains and across domains to operate on the freshest possible version of object state.</t>

<figure><artwork><![CDATA[
 +---------+                       +--------+
 |  SCIM   |                       |        | 
 | Server  |                       |        | 
 |         | <--- SCIM Action ---  |  SCIM  |
 | /Users  |                       | Client |
 | /Groups |                       |        |
 | /Device |                       |        |
 +---------+                       +--------+
    Figure 1: SCIM Components
]]></artwork></figure>

<t>The intent of the SCIM specification is to reduce the cost and complexity of resource management operations by providing common schemas and an extension model, as well as binding documents to offer patterns for exchanging this schema using standard protocols. In essence, it aims to make it fast, cheap, and easy to move resources into, out of, and around applications.
 The SCIM scenarios are overviews of user stories designed to help clarify the intended scope of the SCIM effort.</t>

<section anchor="implementation-concepts"><name>Implementation Concepts</name>
<t>To understand the use cases, we need to familiarize ourselves with five different concepts of the SCIM protocol: Data Models, Protocol Roles, Orchestrator Roles, Triggers, and Actions.</t>

<section anchor="data-models"><name>Data Models</name>
<t>SCIM defines two types of data entities: Resources and Attributes.</t>

<section anchor="resource-object-ro"><name>Resource Object (RO)</name>
<t>A JSON object representing a user, group (or extension object like devices) used by the CRUD operations through the SCIM protocol. The Resource Object contains attributes defined by schemas such as those defined in <xref target="RFC7643"></xref> and can be implemented via the endpoints and parameters defined in <xref target="RFC7644"></xref>.</t>

</section>
<section anchor="resource-attribute-ra"><name>Resource Attribute (RA)</name>
<t>A named element of a Resource Object (RO). Attributes are defined in section 2 of <xref target="RFC7643"></xref> and include characteristics like cardinality (single or multiple values), data types (string, boolean, binary, etc.), and characteristics (required, unique, etc.).</t>

</section>
</section>
<section anchor="protocol-roles"><name>Protocol Roles</name>
<t>SCIM is based on the HTTP protocol; HTTP client and server roles are defined in <xref target="RFC9110"></xref> and <xref target="RFC9112"></xref>. Any SCIM interaction requires one participant to be a SCIM server and the other to be a SCIM client.</t>

<section anchor="scim-server-also-known-as-a-scim-service-provider"><name>SCIM Server (also known as a SCIM Service Provider)</name>
<t>An HTTP web application that provides identity information via the SCIM protocol. A SCIM Server is a RESTful API endpoint offering access to a data model that can be used to push or pull data between two parties. SCIM servers have additional responsibilities such as API security, managing client identifiers and keys, as well as performance management such as API throttling.</t>

</section>
<section anchor="scim-client"><name>SCIM Client</name>
<t>A website or application that uses the SCIM protocol to manage identity data maintained by the service provider. The client can initiate SCIM HTTP requests to a target SCIM Server. A SCIM Client is active software that can push or pull data between two parties.</t>

</section>
</section>
<section anchor="orchestrator-roles"><name>Orchestrator Roles</name>
<t>Orchestrators are the operating parties that take part in a SCIM protocol exchange and ensure data is moving in the correct flows. 
An entity can have one or more orchestrator roles, depending on the overall architecture.</t>

<section anchor="resource-creator-rc"><name>Resource Creator (RC)</name>
<t>An entity responsible for creating the Resource Object (RO). Typically, this role is found in HR or Resource Management (RM) applications that are responsible for creating resources and their attributes.</t>

</section>
<section anchor="resource-updater-ru"><name>Resource Updater (RU)</name>
<t>An entity responsible for updating specific Resource Attributes (RA) of a Resource Object (RO) or the RO itself. Typically, this role is used in conjunction with other SCIM roles that allow this SCIM entity to manage specific Resource Attributes (RA) and/or Resource Objects (RO).</t>

</section>
<section anchor="resource-manager-rm"><name>Resource Manager (RM)</name>
<t>An entity that aggregates or transforms Resource Objects (RO) from resource creators/updaters (RC/RU) and makes them available for Resource Subscribers (RS) using multiple SCIM interactions. An example of this role could be an Identity-as-a-Service (IDaaS) cloud service.</t>

</section>
<section anchor="resource-subscriber-rs"><name>Resource Subscriber (RS)</name>
<t>An entity that consumes Resource Objects (RO) and typically doesn't create new Objects or Attributes. An example would be a SaaS application that delivers a service and needs to create a database of Objects and would get those from an RM/RC/RU.</t>

</section>
<section anchor="external-resource-creator-erc"><name>External Resource Creator (ERC)</name>
<t>An entity that has information about Resource Objects (RO) and their Resource Attributes (RA) but does not participate in SCIM flows. Examples include databases or internally-facing applications.</t>

<figure><artwork><![CDATA[
   +-------------+ +-------------+   +-------------+ +-------------+
   |(RO) Resource| |(RA) Resource|   |(RO) Resource| |(RA) Resource|
   |   Object1   | |  Attribute1 |   |   Object2   | |  Attribute2 |
   +-------------+ +-------------+   +-------------+ +-------------+
          |               |                 |               |
   +-------------+ +-------------+   +-------------+ +-------------+
   |(RC) Resource| |(RU) Resource|   |(RC) Resource| |(RU) Resource|
   |  Creators   | |  Updaters   |   |  Creators   | |  Updaters   |
   +-------------+ +-------------+   +-------------+ +-------------+
       |               |                 |                |
       +--------+------+-----------------+-------+--------+
                |                                |
                v                                v
       +----------------+              +----------------+
       | (RM) Resource  |              | (RM) Resource  |
       |     Manager    |              |     Manager    |
       +----------------+              +----------------+
                |                                |
       +----------------+              +----------------+
       |                |              |                |
       v                v              v                v
  +-------------+ +-------------+   +-------------+ +-------------+
  |(RS) Resource| |(RS) Resource|   |(RS) Resource| |(RS) Resource|
  |  Subscriber | |  Subscriber |   |  Subscriber | |  Subscriber |
  +-------------+ +-------------+   +-------------+ +-------------+
          |                                  |
    +----------------+                  +----------------+
    |                |                  |                |
    v                v                  v                v
 +-------------+ +-------------+   +-------------+ +-------------+
 |(RO) Resource| |(RO) Resource|   |(RO) Resource| |(RO) Resource|
 |   Object1   | |   Object2   |   |   Object1   | |   Object2   |
 +-------------+ +-------------+   +-------------+ +-------------+
    Figure 2: SCIM Orchestrators Roles
]]></artwork></figure>

</section>
</section>
<section anchor="triggers"><name>Triggers</name>
<t>Triggers are activities that may cause a SCIM action to occur. Triggers can result from business processes like a corporate hiring event, scheduled events such as a Unix bash script running as a cron job, or SSO just-in-time events arriving at a federated relying party that identifies a previously unseen user. Triggers can also be standardized events, such as those in the OpenID Shared Signals Framework. Triggers are used to initiate CRUD (Create, Read, Update, Delete) operations using SCIM Actions. The use cases described in this document can use one or multiple trigger mechanisms to achieve the goal of the SCIM element.</t>

<section anchor="periodic-intervals"><name>Periodic Intervals</name>
<t>A periodic interval trigger is a pre-configured agreement where a SCIM client or server performs an action at a specific time. This trigger is often recurring and typically initiates an action from the SCIM Client, though in some use cases it can be done by the SCIM Server. An example of a periodic interval trigger could be a UNIX cron job calling a script.</t>

</section>
<section anchor="events"><name>Events</name>
<t>Event triggers are activities, contexts, or notifications that could happen at any time. A SCIM client may be configured to perform a given SCIM action in response to a specific event, such as an entry written into an audit log, a signal of a corporate workflow completion, or a device management platform notification. SCIM actions could also be triggered by a Security Event Token (SET) as described in <xref target="RFC8417"></xref> or a SCIM event corresponding to <xref target="SCIM Profile for Security Event Tokens"></xref>.</t>

</section>
<section anchor="application-triggers"><name>Application Triggers</name>
<t>Application triggers occur when administrative or end-user interfaces are manipulated. An example of an application trigger might be a user modifying their profile information, resulting in a SCIM client performing an HTTP POST to update the user's resource object at the SCIM server. Another example might be an Identity Administrator creating a new User in the IdM, who immediately wants to update one or more resource Subscribers (typically a SaaS application that is a SCIM Server).</t>

</section>
<section anchor="sso-single-sign-on"><name>SSO (Single Sign-On)</name>
<t>Single Sign-On triggers occur when a user authenticates via federated protocols such as SAML 2.0 or OpenID Connect. If a federated assertion arrives for a user who has not yet been provisioned into the destination application, the application may be triggered to perform just-in-time (JIT) provisioning. This trigger occurs in scenarios where a Single Sign-On flow happens, but not all the resource attributes for the user object are passed in the federated assertion, resulting in a SCIM action to push or pull the remaining needed attributes.</t>

<figure><artwork><![CDATA[
+---------------+                                   +---------------+
|               |                                   |               |
|               |                                   |               |
|               |                                   |     SCIM      |
|    Client     |                (1)                |    Server     | 
|               | <-------------------------------> |               |
|  (typically   |                                   | (typically an |
|   an IdM)     |                (2)                |      SaaS     |
|               | <-------------------------------> | Application)  |   
|               |                                   |               |
|    RC/RU/RM   |                                   |      RS       |
|               |                                   |               |
+---------------+                                   +---------------+
    Figure 3:  SCIM trigger using  Single Sign-On
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>An SSO trigger creates the user and might create some Resource Attributes (RA) of a Resource Object (RO).</t>
  <t>SCIM actions will then complement the attributes created initially through SSO JIT with additional Resource Attributes (RA) of the previously created Resource Objects (RO).
  This use case combines the SCIM protocol with other protocols used for Single Sign-On, especially in the context of JIT (Just-in-Time Provisioning). This is particularly useful with protocols like SAML, which are limited by the number of characters in the URL.</t>
</list></t>

</section>
</section>
<section anchor="scim-actions"><name>SCIM Actions</name>
<t>The SCIM protocol defines interactions between two standardized parties that conform to HTTP RESTful conventions. The protocol enables CRUD operations by mapping these activities to HTTP verbs such as POST, PUT, GET, DELETE, etc. The protocol itself doesn't assume a direction of data flow, and use cases discussed in section 4 are created using the orchestrator roles. A SCIM entity can have multiple roles depending on the objective of the use case being described.</t>

<section anchor="client-active-push"><name>Client active Push</name>
<t>A SCIM client uses HTTP verbs POST, PUT, or PATCH to create or update objects and/or attributes at a SCIM server. The SCIM client is actively "pushing" the data to the endpoint. This SCIM action can occur when the SCIM client is the primary Resource Creator/Updater (RC/RU).
  The most common and widely deployed example is a SCIM client providing information about a RO and its RA to a server, which is also called a SCIM Server in <xref target="RFC7643"></xref> and <xref target="RFC7644"></xref>.</t>

<figure><artwork><![CDATA[
+----------------+                                   +----------------+
|                |                                   |                |
|                |                                   |                |
|                |                                   |                |
|      SCIM      |                (1)                |      SCIM      |
|     Client     |  -------------------------------> |     Server     |
|                |                                   |                |
|                |                (2)                |                |
|                | <-------------------------------- |                |   
|     RM/RC/RU   |                                   |        RS      |
|                |                                   |                |
|                |                                   |                |
+----------------+                                   +----------------+
    Figure 4: SCIM action for Client Active Push
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>There will be push using a HTTP POST, PUT, PATCH, DELETE depending on the operation that the Client want to achieve at the Server.</t>
  <t>The Service Provider will return the RO/RA with additional metadata information to allow for audit.</t>
</list></t>

</section>
<section anchor="client-active-pull"><name>Client Active Pull</name>
<t>A SCIM client uses the HTTP GET verb to request data from a SCIM server. With the action of an active pull, the client will fetch one or multiple objects from the SCIM server.
 Client active pulls can be used in situations where a client needs to maintain a synchronized large body of objects, such as a device list or user address book, without the need to track individual Resource Objects (RO) or Resource Attributes (RA). There are also cases where the client performs a one-time pull of only one specific RO from a server that manages many ROs. For example, a mobile app (SCIM Client) may fetch the current license entitlement from a Device Manager (SCIM Server).</t>

<figure><artwork><![CDATA[
+----------+                                   +----------+
|          |                                   |          |
|          |                                   |          |
|          |                                   |          |
|   SCIM   |                (1)                |   SCIM   |
|  Server  | <-------------------------------- |  Client  |
|          |                                   |          |
|          |                (2)                |          |
|          | --------------------------------> |          |   
| RC/RU/RM |                                   |    RS    |
|          |                                   |          |
|          |                                   |          |
+----------+                                   +----------+
    Figure 5:  SCIM action for Client Active Pull
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>The SCIM client will perform an HTTP GET to obtain the selected list of Resource Objects (RO) and their Resource Attributes (RA).</t>
  <t>The SCIM Server will return the RO and its RA along with additional metadata information to allow for auditing.</t>
</list></t>

</section>
<section anchor="active-dynamic-query"><name>Active Dynamic Query</name>
<t>A SCIM client uses the HTTP GET verb to request data from a SCIM server. With the action of an active pull, the client will fetch one or multiple objects from the SCIM server. The response data from the SCIM server will include a Dynamic Query (DQ) token that allows the client to subsequent active pulls that will only return RO objects that have changed (including references to deleted objects). The data returned from a dynamic query is usually much smaller, and allows a client to focus only on processing incremental changes rather than performing a full sync every time. With this kind of action, SCIM reconciliations are possible, where the SCIM client can resolve inconsistencies created over time between the client and the SCIM server.</t>

<figure><artwork><![CDATA[
+----------+                                   +----------+
|          |                                   |          |
|          |                                   |          |
|          |                                   |          |
|   SCIM   |                (1)                |          |
|  Server  | <-------------------------------- |  Client  |
|          |                                   |          |
|          |                (2)                |          |
|          | --------------------------------> |          |   
| RC/RU/RM |                                   | RS/RU/RS |
|          |                                   |          |
|          |                                   |          |
+----------+                                   +----------+
    Figure 6: SCIM action for Client Active Dynamic Query
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>The SCIM client will perform an HTTP GET requesting a delta list of Resource Objects (RO) and their Resource Attributes (RA) since the previous SCIM action.</t>
  <t>The SCIM Service Provider will return the delta list of RO and their RA along with additional metadata information for auditing purposes.</t>
</list></t>

</section>
<section anchor="domain-replication-mode"><name>Domain Replication Mode</name>
<t>This is an action specifically for triggers that are events. In this mode, there is an administrative relationship spanning multiple operational domains. Data shared in events typically uses the full mode variation of change events, including the data payload attribute. This eliminates the need for a callback to retrieve additional data.
 "Domain-Based Replication" events (DBR) are used to synchronize resource changes between SCIM service providers within a common administrative domain.</t>

<figure><artwork><![CDATA[
+--------+                +---------------+                 +---------+
|        |                |               |                 |         |
|  SCIM  |                |               |                 |         |
| Client |                |  SCIM Server  |                 |         |
|        |     (1)        |               |      (3)        |  SCIM   |
|        | <------------- |               | --------------> | Server  |
|        |                |               |                 |         | 
| RM/RC  |     (2)        |               |                 |         |
|  /RU   | -------------> |               |                 |         |
|        |                |     RS/RC/RU  |                 |   RS    |
|        |                |               |                 |         |
+--------+                +---------------+                 +---------+
    Figure 7:  SCIM actions aggregated by a SCIM server then 
      transmitted via SCIM Events using Domain Replication Mode
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM Action.</t>
  <t>SCIM Response.</t>
  <t>Event SCIM:prov:op id:xyz</t>
</list></t>

</section>
<section anchor="co-ordinated-provisioning"><name>Co-Ordinated Provisioning</name>
<t>In these relationships, an Event Publisher and Receiver <xref target="SCIM Profile for Security Event Tokens"></xref> typically exchange resource change events without exchanging data. For the receiver to know the value of the data, the Event Receiver usually makes calls back to the SCIM Event Publisher domain to receive a new copy of the data (e.g., using a SCIM GET request).
 In any Event Publisher and Receiver relationship, the set of SCIM resources (e.g., users) that are linked or coordinated is managed within the context of an event feed, which MAY be a subset of the total set of resources on either side. For example, an event feed could be limited to users who have consented to the sharing of information between domains. To support this capability, "feed" specific events are defined to indicate the addition and removal of SCIM resources from a feed.</t>

<figure><artwork><![CDATA[
+--------+                +---------------+                 +---------+
|        |                |               |                 |         |
|  SCIM  |                |               |                 |         |
| Client |                |  SCIM Server  |                 |         |
|        |     (1)        |               |      (3)        |  SCIM   |
|        | <------------- |               | --------------> | Server  |
|        |                |               |                 |         | 
| RM/RC  |     (2)        |               |      (4)        |         |
|  /RU   | -------------> |               | --------------> |         |
|        |                |     RS/RC/RU  |                 |   RS    |
|        |                |               |                 |         |
+--------+                +---------------+                 +---------+
    Figure 8:  SCIM actions aggregated by a SCIM server then 
      transmitted via SCIM Events using Co-Ordinated Provisioning
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM Action.</t>
  <t>SCIM Response.</t>
  <t>Event SCIM:prov:op id:xyz</t>
  <t>SCIM Active Pull</t>
</list></t>

</section>
</section>
</section>
</section>
<section anchor="scim-use-cases"><name>SCIM Use Cases</name>
<t>This section describes some common SCIM use cases, explaining when, where, why, and how they are found in cross-domain environments. The ultimate goal is to provide guidance for developers working on common models, explaining the challenges and components involved.
 Because SCIM is a protocol where two entities exchange information about resources across domains, the use cases explain how the different components can interact to support simple to complex architectures for cross-domain resource management. Orchestrator roles are mapped to the use cases to simplify the explanation of the multiple functions of the SCIM elements. The use cases build on each other, starting with simple cases and ending with the most complex ones.</t>

<section anchor="use-cases-for-orchestrator-roles"><name>Use Cases for Orchestrator Roles</name>

<section anchor="resource-subscriber-rs-1"><name>Resource Subscriber (RS)</name>
<t>A Resource Subscriber (RS) receives data from a remote corporate data store. This is a very common and simple SCIM use case, where the Resource Object (RO) and its Resource Attributes (RA) are created by another party. The CRUD operations on these resources trigger specific actions to facilitate the information exchange between two entities, typically the SCIM Client and Server.
 The Resource Subscriber (RS) will decide which RA (Resource Attributes) to consider and how the RO (Resource Object) will appear in its resource database.
 Typically, we find this kind of use case in small to mid-sized organizations, and it is usually seen in on-premises deployments.</t>

<section anchor="single-tenant-resource-subscriber-rs"><name>Single-Tenant Resource Subscriber (RS)</name>
<t>Resource Subscriber (RS) in a single tenant that can either be the SCIM Client or SCIM Server. Typically, we see this in an on-premise application.</t>

<section anchor="single-tenant-resource-subscriber-that-is-the-scim-server"><name>Single-Tenant Resource Subscriber that is the SCIM Server</name>
<t>It is common today for the SCIM Client, typically performing the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater), to perform CRUD operations on the database of the RS (Resource Subscriber) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) to the single-tenant RS.
 A good example would be an on-premises application (most commonly a single-tenant application) that creates its own database of objects for its own use, obtaining the objects from a central IdM (Identity Management) system.</t>

<figure><artwork><![CDATA[
                                             Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Client  |                                   |  Server  |
|          |                (1)                |          |
|          | --------------------------------> |          |
| RC/RU/RM |                                   |    RS    |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 9: Single-Tenant Resource Subscriber that is the SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="single-tenant-resource-subscriber-that-is-the-scim-client"><name>Single-Tenant Resource Subscriber that is the SCIM Client</name>
<t>The SCIM Client, which is the RS (Resource Subscriber), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the IdM (Identity Management) system and is responsible for the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
 A good example would be an on-premises application (most commonly a single-tenant application) that creates its own database of objects, such as devices, from a central IdM (Identity Management) system. This option is a good solution for situations where the RS (Resource Subscriber) is not reachable from the IdM.</t>

<figure><artwork><![CDATA[
                                             Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Server  |                                   |  Client  |
|          |                (1)                |          |
|          | --------------------------------> |          |
| RC/RU/RM |                                   |    RS    |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 10: Single-Tenant Resource Subscriber that is the SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
<section anchor="multi-tenant-resource-subscriber"><name>Multi-Tenant Resource Subscriber</name>
<t>It only differs from the Single-Tenant Resource Subscriber (RS) by supporting multiple tenants. Typically, we see this in SaaS applications.</t>

<section anchor="multi-tenant-resource-subscriber-that-is-the-scim-server"><name>Multi-Tenant Resource Subscriber that is the SCIM Server</name>
<t>It is the most common today for the SCIM Client, typically performing the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater), to perform CRUD operations on the database of the RS (Resource Subscriber) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) to the multi-tenant RS (Resrouce Subscriber).
 A good example would be a SaaS application (most commonly a multi-tenant applications) that creates its own database of objects for its own use, obtaining the objects from a central IdM (Identity Management) system.</t>

<figure><artwork><![CDATA[
                                              Provision Domain
                                              +------------+
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Client A |                                  ||  Server  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source A)|                                  ||(Tenant A)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Client B |                                  ||  Server  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source B)|                                  ||(Tenant B)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Client C |                                  ||  Server  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source C)|                                  ||(Tenant C)||
+----------+                                  |+----------+|
                                              +------------+

    Figure 11: Multi-Tenant Resource Subscriber that is the SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="multi-tenant-resource-subscriber-that-is-the-scim-client"><name>Multi-Tenant Resource Subscriber that is the SCIM Client</name>
<t>The SCIM Client, which is the RS (Resource Subscriber), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the IdM (Identity Management) system and is responsible for the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
A good example would be a SaaS application (most commonly a multi-tenant application) that creates its own database of objects for each of its tenants, using a central IdM (Identity Management) system.</t>

<figure><artwork><![CDATA[
                                             Provision Domain
                                              +------------+
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Server A |                                  ||  Client  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source A)|                                  ||(Tenant A)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Server B |                                  ||  Client  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source B)|                                  ||(Tenant B)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Server C |                                  ||  Client  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source C)|                                  ||(Tenant C)||
+----------+                                  |+----------+|
                                              +------------+

    Figure 12: Multi-Tenant Resource Subscriber that is the SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
</section>
<section anchor="resource-creator-rcru"><name>Resource Creator (RC/RU)</name>
<t>Single-tenant provisioning is done using a Resource Creator/Updater (RC/RU), which is responsible for creating the objects that will be passed across different systems. This is a very common and simple SCIM use case, where the Resource Object (RO) and its Resource Attributes (RA) are created. The CRUD operations on these resources trigger specific actions to facilitate the information exchange between two entities, typically the SCIM Client and Server.
It is the responsibility of the Resource Creator/Updater to pass all relevant Resource Attributes (RA) for that specific RS/RM. Typically, we find this kind of use case in small to mid-sized organizations, mainly in on-premises systems, where there is no structured method to handle the resources.</t>

<section anchor="single-tenant-resource-creatorupdater-rcru"><name>Single-Tenant Resource Creator/Updater (RC/RU)</name>
<t>Resource Creator/Updater in a single tenant that can either be the SCIM Client or SCIM Server. Typically, we see this in an on-premise application.</t>

<section anchor="single-tenant-resource-creatorupdater-that-is-the-scim-client"><name>Single-Tenant Resource Creator/Updater that is the SCIM Client</name>
<t>It is common today for the SCIM Client, typically performing the roles RC (Resource Creator) and RU (Resource Updater) to perform CRUD operations on the database of the RS (Resource Subscriber) or RM (Resrouce Manager) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) from a single-tenant provision service to a Consumer.
A good example would be traditional on-premises HR (Human Resource) applications that creates Resrouce Object (RO) either in central IdM (Identity Management) system or directly in a target aplications.</t>

<figure><artwork><![CDATA[
Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Client  |                                   |  Server  |
|          |                (1)                |          |
|          | --------------------------------> |          |
|   RC/RU  |                                   |  RS/RM   |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 13: Single-Tenant Resource Creator/Updater that is the 
       SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="single-tenant-resource-creatorupdater-that-is-the-scim-server"><name>Single-Tenant Resource Creator/Updater that is the SCIM Server</name>
<t>The SCIM Client, which can be the RS (Resource Subscriber) or RM (Resource Manager), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the source system responsible for the roles of RC (Resource Creator) and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
A good example would be a traditional HR on-premises application (most commonly a single-tenant application) that creates its own database of objects and provides them to a SCIM client. The SCIM client can either be an RS (Resource Subscriber), typically a standalone application that requires object information from the HR application, or an RM (Resource Manager), such as an on-premises IdM that will consolidate and add additional RA (Resource Attributes) to the RO (Resource Objects). This option is a good solution for situations where the RS (Resource Subscriber) or RM (Resource Manager) is not reachable from the HR application.</t>

<figure><artwork><![CDATA[
Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Server  |                                   |  Client  |
|          |                (1)                |          |
|          | --------------------------------> |          |
|   RC/RU  |                                   |  RS/RM   |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 14: Single-Tenant Resource Creator/Updater that is the 
      SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
<section anchor="multi-tenant-resource-creatorupdater-rcru"><name>Multi-Tenant Resource Creator/Updater (RC/RU)</name>
<t>It only differs from the Single-Tenant Resource Creator/Updater (RC/RU) by supporting multiple tenants. A typically would be an HR SaaS aplication.</t>

<section anchor="multi-tenant-resource-creatorupdater-that-is-the-scim-client"><name>Multi-Tenant Resource Creator/Updater that is the SCIM Client</name>
<t>It is common today for the SCIM Client, typically performing the roles of RC (Resource Creator) and RU (Resource Updater), to perform CRUD operations on the database of the RS (Resource Subscriber) or RM (Resource Manager) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) from a multi-tenant provision service to a consumer.
A good example would be any new SaaS HR (Human Resources) application that creates Resource Objects (RO) either in a central IdM (Identity Management) system or directly in target applications.</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant A)||                                   |(Consumer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant B)||                                   |(Consumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant C)||                                   |(Consumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 15: Multi-Tenant Resource Creator/Updater that is the 
      SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="multi-tenant-resource-creatorupdater-that-is-the-scim-server"><name>Multi-Tenant Resource Creator/Updater that is the SCIM Server</name>
<t>The SCIM Client, which can be the RS (Resource Subscriber) or RM (Resource Manager), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the source system responsible for the roles of RC (Resource Creator) and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
A good example would be a SaaS HR (Human Resource) application (most commonly a multi-tenant application) that has its own database of objects and provides them to a SCIM client. The SCIM client can either be an RS (Resource Subscriber), typically a standalone application that requires object information from the HR application, or an RM (Resource Manager), such as an on-premises IdM that will consolidate and add additional RA (Resource Attributes) to the RO (Resource Objects).</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant A)||                                   |(Consumer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant B)||                                   |(Consumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant C)||                                   |(Consumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 16: Multi-Tenant Resource Creator/Updater that is the 
      SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
</section>
<section anchor="resource-management-rm"><name>Resource Management (RM)</name>
<t>Typically, one or more upstream object databases populate the Resource Manager (RM), which then provides that resource information to downstream services requiring specific sets of the populated objects.
The scenarios described in the next chapter will always outline the concept of upstream services, which are normally the sources of the objects, and downstream services, which are typically the consumers of the objects.
A single-tenant Resource Manager (RM) will receive Resource Objects (RO) and their Resource Attributes (RA) from an upstream entity, which can be either SCIM or non-SCIM. A good example of a non-SCIM upstream source would be connectors that synchronize users and groups using an HTTP REST interface to copy those objects from a database using legacy protocols like LDAP.
Normally, the Resource Manager (RM) will accept objects from multiple sources, and it is its responsibility to understand which Resource Attributes (RA) to obtain from each source. There might also be independent agreements for different groups of Resource Objects (RO).
The Resource Manager (RM) can also assume the roles of Resource Creator (RC) and Resource Updater (RU), where some or all of the Resource Objects (RO) or some of their Resource Attributes (RA) are created locally. These kinds of deployments are very common in greenfield deployments.</t>

<section anchor="single-tenant-resource-manager-rm"><name>Single-Tenant Resource Manager (RM)</name>
<t>Single-Tenant Resrouce Manager are tipically Identity Manager (IdM) that are on-premises, where the upStream is tipically also on-premise but the Downstream can iether be on-premise, Cloud or hybrid application.</t>

<section anchor="single-tenant-resource-manager-that-is-the-scim-server"><name>Single-Tenant Resource Manager that is the SCIM Server</name>
<t>The upstream service will provide one or more sources of Resource Objects (RO) and their Resource Attributes (RA). If the source is a SCIM Client, it will use the Active Push method to deliver that information to the Resource Manager, which will be the SCIM Server and the consumer of those Resource Objects. The same Resource Manager will act as a SCIM server for the downstream consumer, which will be the SCIM Client performing the actions of Active/Delta Push.
This is a partial implementation used by some IdM systems today, where they obtain Resource Objects from legacy databases using non-SCIM protocols and provide Resource Objects (RO) to downstream services, typically SaaS applications that need to create their own database of Resource Objects.</t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Client  |        ||  Server ||  Server  ||        |  Client |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 17: Single-Tenant Resource Manager that is the SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
<section anchor="single-tenant-resource-manager-that-is-the-scim-client"><name>Single-Tenant Resource Manager that is the SCIM Client</name>
<t>The upstream service will provide one or more sources of Resource Objects (RO) and their Resource Attributes (RA). If the source is a SCIM Server, the Resource Manager, which will act as a SCIM Client, will use the Active/Delta Pull method to obtain that information. The same Resource Manager will act as a SCIM Server for the downstream consumer and will perform the action of pushing a select group of Resource Objects (RO) and their Resource Attributes (RA) to the consumer service.
This is a partial implementation used by some IdM systems today, where they obtain Resource Objects from legacy databases using non-SCIM protocols and provide Resource Objects (RO) to downstream services, typically SaaS applications that need to create their own database of Resource Objects.</t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Server  |        ||  Client ||  Client  ||        |  Server |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 18: Single-Tenant Resource Manager that is the SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="single-tenant-resource-manager-that-is-the-scim-server-and-scim-client"><name>Single-Tenant Resource Manager that is the SCIM Server and SCIM Client</name>
<t>The upstream service will provide one or more sources of Resource Objects (RO) and their Resource Attributes (RA).
This scenario we will use as SCIM action Active/Delta Pull from the UpStream to the Resource Manager and the same action from it to the DownStream, for the scenarios where the initial Source is a SCIM server and the final Consumer is the SCIM Client.
This scenarios we will use as SCIM action Active Push from the UpStream to the Resource Manager and the same action from it to the DownStream, for the scenarios where the initial Source is a SCIM Client and the final Consumer is the SCIM Server.
This is a partial implementation used by some IdM systems today, where they obtain Resource Objects from legacy databases using non-SCIM protocols and provide Resource Objects (RO) to downstream services, typically SaaS applications that need to create their own database of Resource Objects.</t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Server  |        ||  Client ||  Server  ||        |  Client |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 19: Single-Tenant Resource Manager that is the SCIM Client
      and SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Client  |        ||  Server ||  Client  ||        |  Server |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 20: Single-Tenant Resource Manager that is the SCIM Server 
      and SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
</section>
<section anchor="multi-tenant-resource-manager-rm"><name>Multi-Tenant Resource Manager (RM)</name>
<t>Multi-Tenant Resource Manager are typically Identity Manager (IdM) that are cloud base, normally designated as IDaaS, where the upStream and Downstream are either on-premise or Cloud base.</t>

<section anchor="multi-tenant-resource-manager-that-is-the-scim-server"><name>Multi-Tenant Resource Manager that is the SCIM Server</name>
<t>Same information as Single-Tenant Resource Manager that is the SCIM Server but the Provision domain has multiple Tenants</t>

</section>
<section anchor="multi-tenant-resource-manager-that-is-the-scim-client"><name>Multi-Tenant Resource Manager that is the SCIM Client</name>
<t>Same information as Single-Tenant Resource Manager that is the SCIM Client but the Provision domain has multiple Tenants</t>

</section>
<section anchor="multi-tenant-resource-manager-that-is-the-scim-server-and-scim-client"><name>Multi-Tenant Resource Manager that is the SCIM Server and SCIM Client</name>
<t>Same information as Single-Tenant Resource Manager that is the SCIM Server and SCIM Client but the Provision domain has multiple Tenants</t>

</section>
</section>
</section>
</section>
<section anchor="specific-implementations"><name>Specific Implementations</name>

<section anchor="partner-device-registry"><name>Partner Device Registry</name>
<t>An important step in making a device work is to provide its details from the manufacturer to the customer. The Resource Object (RO) of the device, provided by the manufacturer, includes its Resource Attributes (RA), such as certificates, pairing protocols, and other relevant details.</t>

<section anchor="manufacturer-details-provided-to-customer-by-vendor-that-is-the-scim-client"><name>Manufacturer details provided to customer by vendor that is the SCIM client</name>
<t>The manufacturer is the multi-tenant SCIM client and will push details of devices acquired by specific customers to their SCIM servers. The customer will provide the SCIM server and will receive information from the acquired devices. Additionally, the customer will manage the attributes of those devices, assuming the roles of Resource Subscriber (RS), Resource Updater (RU), and Resource Manager (RM). After the initial creation of the Resource Object (RO) in the customer's device database, it will be the server's responsibility to add and update the Resource Attributes (RA).
Typically, the device will reach out to a device manager in the customer's network, which will provide the SCIM server endpoint to the manufacturer. This task can also be done manually at the time of the device acquisition, allowing a SCIM push of the Resource Object (RO) to the customer's device management platform.</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant A)||                                   |(Customer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant B)||                                   |(Costumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant C)||                                   |(Costumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 21: Manufactor is the SCIM client and push RO to Customers 
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="manufacturer-details-provided-by-requesting-it-from-customer-that-is-the-scim-client"><name>Manufacturer details provided by requesting it from Customer that is the SCIM client</name>
<t>The manufacturer is the multi-tenant SCIM server that holds the details of the Resource Objects, which it can provide to customers who acquire them. The customer will provide a SCIM client that will perform an Active Pull of the Resource Objects acquired from a specific manufacturer.
The SCIM client will have the roles of Resource Subscriber (RS), Resource Manager (RM), and Resource Updater (RU), because after creating the Resource Object (RO) in its object database, it will be responsible for updating and modifying that object.
This use case is especially interesting for customers whose Device Manager is not reachable from the Internet. In such cases, the Device Manager will act as a SCIM client and perform the action of pulling the Resource Object (RO) from the multi-tenant SCIM server provided by the manufacturer.</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant A)||                                   |(Consumer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant B)||                                   |(Consumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant C)||                                   |(Consumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 22: Manufactor is the SCIM Server and Customers Pull 
      information about Device
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Pull</t>
</list></t>

</section>
</section>
<section anchor="device-identity-creation-from-commissioner-tool"><name>Device Identity Creation from Commissioner Tool</name>
<t>When devices are initially provisioned from the client application (mobile application, web application, etc.), the client application will allow for the provision of additional details about the devices that are specific to that installation.
Whether the commissioning tool is already SCIM-enabled or the client application includes the commissioning tool, there will ultimately be a SCIM action to perform an Active Push. This action will provide the additional Resource Attributes (RA) to be added to the Resource Object (RO) that is maintained in the device manager.</t>

<figure><artwork><![CDATA[
Device Manager                Client App        Commissioner Tool
+--------+                +---------------+    (2)   +----+
|        |                |  SCIM client  | <------> | RA |
|  SCIM  |     (1)        | +----+ +----+ |          +----+
| Server | <------------- | | RA | | RA | |    (2)   +----+
|        |                | +----+ +----+ | <------> | RA |
|        |                +---------------+          +----+
|        |                           Client App + Comissioner Tool
|        |                               +--------+
|  RC/RU |               (1)             |   RA   |
|  RM/RS | <---------------------------- |  SCIM  |
|        |                               | Client |
+--------+                               +--------+
    Figure 23:  Commissioner tool provide Resource Attribtues to 
      Device Manager
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM client performs Active Push</t>
  <t>Non SCIM action</t>
</list></t>

</section>
<section anchor="client-applications-gets-directory-services"><name>Client Applications gets directory Services</name>
<t>The client application retrieves information about all devices and their attributes from the Device Manager for their environments. The client application typically downloads the full list of devices daily during non-working hours, with an optional on-demand sync. SCIM clients should only be able to access the devices that they manage.</t>

<figure><artwork><![CDATA[
Device Manager                Client App        Commissioner Tool
+--------+                +---------------+    (2)   +----+
|        |                |  SCIM client  | <------> | RA |
|  SCIM  |     (1)        | +----+ +----+ |          +----+
| Server | -------------> | | RA | | RA | |    (2)   +----+
|        |                | +----+ +----+ | <------> | RA |
|        |                +---------------+          +----+
|        |                         Client App + Comissioner Tool
|        |                               +--------+
|  RC/RU |               (1)             |   RA   |
|  RM/RS |  ---------------------------> |  SCIM  |
|        |                               | Client |
+--------+                               +--------+
    Figure 24: Device manager provides RO and RA to the Devices through
      Commissioner Tool
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM client performs Active Pull</t>
  <t>Non SCIM action</t>
</list></t>

</section>
<section anchor="provide-credetials-to-manage-device"><name>Provide Credetials to manage Device</name>
<t>The Device Manager can provide Resource Attributes to the client application so that the devices can be configured using the commissioning tool. For example, the Device Manager can provide credentials to the device using the client application as the gateway. Through the commissioning tool, which can be a single entity, these credentials can be delivered to the device.</t>

<figure><artwork><![CDATA[
Device Manager                Client App        Commissioner Tool
+--------+                +---------------+    (2)   +----+
|        |     (1)        |               | <------> | RA |
|  SCIM  | -------------> |  SCIM Server  |          +----+
| Client |                |               |    (2)   +----+
|        |                |      RS       | <------> | RA |
+--------+                +---------------+          +----+
    Figure 25:  Device Manager provide Resource Attributes to the 
      Commissioner tool to configure device
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM client performs Active Push</t>
  <t>Non SCIM action</t>
</list></t>

</section>
<section anchor="enterprise-last-mile-applications"><name>Enterprise "Last Mile" Applications</name>
<t>When provisioning to line of business Enterprise applications, implementers are often dealing with software that cannot be easily modified. As a result, it may be necessary to perform system integrations that run at the application layer, the database layer, or the framework layer in order to insert or change user data sourced from SCIM infrastructure. Connectors often use a client active pull over a periodic interval to keep the application in sync. It is also common for this pattern to include a just-in-time SSO trigger, so that should a new user try to access the line of business application before the resource has been created by the periodic active pull, they are created instead based on the contents of the user's SAML assertion and then managed going forward by SCIM active pulls.</t>

</section>
<section anchor="ra-authority-in-saas-application"><name>RA authority in SaaS Application</name>
<t>Sometimes, not all the Resource Attributes (RA) of a Resource Object (RO) are owned (created) by the Resource Creator (RC) or Resource Updater (RU). Very specialized Resource Attributes (RA) can be the responsibility of a SaaS application. For example, an IdM should create user records with standard attributes like first name, last name, home address, etc., but the SaaS application should define the email attribute if that SaaS application is an email server.</t>

<section anchor="implementers-provision-domain-is-a-scim-client-and-a-scim-server"><name>Implementers Provision Domain is a SCIM Client and a SCIM server</name>
<t>The implementer's domain acts as the SCIM Client and is the authority for regular attributes such as first name, last name, home address, etc., of a user. These attributes are created and updated by the Provision Domain, which functions as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU).
The application is the authority for one or more specific Resource Attributes (RA), such as the email address of a given user. This means the application will serve as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU) for those specific attributes only.
Both the Provision Domain and the application will function as both the SCIM Client and SCIM Server for the respective Resource Attributes they are responsible for. They will use the SCIM action of Active Push to pass the Resource Attributes of the Resource Object to their counterpart.
Thus, both the roles of SCIM Server and SCIM Client exist within the Provision Domain and the application.</t>

<figure><artwork><![CDATA[
                                                 Application
Provision Domain                                  Customer A
+------------+                                  +------------+ 
|+----------+|                                  |+----------+|
||   SCIM   ||                                  ||   SCIM   ||
||  Client  ||                                  ||  Server  ||
||          ||                (1)               ||          ||
||          || -------------------------------> ||          ||
|| RM/RC/RU ||                                  ||    RS    ||
||          ||                                  ||          ||
||          ||                                  ||          ||
|+----------+|                                  |+----------+|
|+----------+|                                  |+----------+|
||   SCIM   ||                                  ||   SCIM   ||
||  Server  ||                                  ||  Client  ||
||          ||                (1)               ||          ||
||          || <------------------------------- ||          ||
||    RS    ||                                  || RM/RC/RU ||
||          ||                                  ||          ||
||          ||                                  ||          ||
|+----------+|                                  |+----------+|
+------------+                                  +------------+
    Figure 26: Single Ro with diferent RA authority implemented between
      the Provision Domain and the customer SaaS App 
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="implementers-provision-domain-is-a-scim-client"><name>Implementers Provision Domain is a SCIM Client</name>
<t>The implementer's domain acts as the SCIM Client and is the authority for regular attributes, such as first name, last name, home address, etc., of a user. These attributes are created and updated by the Provision Domain, which functions as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU).
The application is the authority for one or more specific Resource Attributes (RA), such as the email address of a given user. This means the application will serve as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU) for those specific attributes only.
In this use case, since the Provision Domain is always the SCIM Client and the application is always the SCIM Server, the Active Push method will be used for the regular attributes of the Resource Objects (RO). The Active/Delta Pull method will be used to retrieve the specialized Resource Attributes that are the responsibility of the application.</t>

<figure><artwork><![CDATA[
                                              Application
Provision Domain                               Customer A
+----------+                                  +----------+
|   SCIM   |               (1)                |   SCIM   |
|  Client  | -------------------------------> |  Server  |
|          |                                  |          |
|          |               (2)                |          |
| RM/RC/RU | <------------------------------- |    RS    |
|          |                                  |          |
+----------+                                  +----------+
    Figure 27: Single RO with diferent RA authority implemented between
      the Provision Domain and the customer SaaS App 
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
<section anchor="reconciliations"><name>Reconciliations</name>
<t>Because of inconsistencies or mistakes in the SaaS App Resource Objects and it attributes might change and there is no visibility of the IdM that it happens.
System will do reconciliation to make sure that Resource Objects (RO) and its Resrouce Attributes (RA) are consistent across different systems.
If there is a new attributes from SCIM Server in the Delta Pull, the SCIM client will do a push to fix it and make again synchronize</t>

<figure><artwork><![CDATA[
                                              Application
Provision Domain                               Customer A
+----------+                                  +----------+
|   SCIM   |               (1)                |   SCIM   |
|  Client  | -------------------------------> |  Server  |
|          |               (2)                |          |
|          | <------------------------------- |          |
| RM/RC/RU |               (3)                |    RS    |
|          | -------------------------------> |          |
+----------+                                  +----------+
    Figure 28: Reconciliation of RO/RA between IDM and Application
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>Regular SCIM action - SCIM Client performs Active Push</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
  <t>Remediation SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>
<t>Authentication and authorization must be ensured for SCIM operations to guarantee that only authenticated entities can perform SCIM requests and that the requested SCIM operations are authorized.
SCIM resources (e.g., Users and Groups) can contain sensitive information. Therefore, data confidentiality must be ensured at the transport layer.
There can be privacy issues that extend beyond transport security, such as moving personally identifiable information (PII) offshore between different SCIM elements. Regulatory requirements must be met when migrating identity information between different jurisdictions (e.g., countries and states may have differing privacy regulations).
Additionally, privacy-sensitive data elements may be omitted or obscured in SCIM transactions or stored records to protect these data elements for a user. For instance, a role-based identifier might be used instead of an individual's name.
Detailed security considerations are specified in Section 7 of the SCIM protocol <xref target="RFC7644"></xref> and Section 9 of the SCIM schema <xref target="RFC7643"></xref>.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>
<t>There are no additional IANA considerations to those specified <xref target="RFC7643"></xref> and <xref target="RFC7644"></xref>.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>



    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC7643">
  <front>
    <title>System for Cross-domain Identity Management: Core Schema</title>
    <author fullname="P. Hunt" initials="P." role="editor" surname="Hunt"/>
    <author fullname="K. Grizzle" initials="K." surname="Grizzle"/>
    <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
    <author fullname="C. Mortimore" initials="C." surname="Mortimore"/>
    <date month="September" year="2015"/>
    <abstract>
      <t>The System for Cross-domain Identity Management (SCIM) specifications are designed to make identity management in cloud-based applications and services easier. The specification suite builds upon experience with existing schemas and deployments, placing specific emphasis on simplicity of development and integration, while applying existing authentication, authorization, and privacy models. Its intent is to reduce the cost and complexity of user management operations by providing a common user schema and extension model as well as binding documents to provide patterns for exchanging this schema using HTTP.</t>
      <t>This document provides a platform-neutral schema and extension model for representing users and groups and other resource types in JSON format. This schema is intended for exchange and use with cloud service providers.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7643"/>
  <seriesInfo name="DOI" value="10.17487/RFC7643"/>
</reference>
<reference anchor="RFC7644">
  <front>
    <title>System for Cross-domain Identity Management: Protocol</title>
    <author fullname="P. Hunt" initials="P." role="editor" surname="Hunt"/>
    <author fullname="K. Grizzle" initials="K." surname="Grizzle"/>
    <author fullname="M. Ansari" initials="M." surname="Ansari"/>
    <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
    <author fullname="C. Mortimore" initials="C." surname="Mortimore"/>
    <date month="September" year="2015"/>
    <abstract>
      <t>The System for Cross-domain Identity Management (SCIM) specification is an HTTP-based protocol that makes managing identities in multi-domain scenarios easier to support via a standardized service. Examples include, but are not limited to, enterprise-to-cloud service providers and inter-cloud scenarios. The specification suite seeks to build upon experience with existing schemas and deployments, placing specific emphasis on simplicity of development and integration, while applying existing authentication, authorization, and privacy models. SCIM's intent is to reduce the cost and complexity of user management operations by providing a common user schema, an extension model, and a service protocol defined by this document.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7644"/>
  <seriesInfo name="DOI" value="10.17487/RFC7644"/>
</reference>
<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>
<reference anchor="RFC9112">
  <front>
    <title>HTTP/1.1</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document specifies the HTTP/1.1 message syntax, message parsing, connection management, and related security concerns.</t>
      <t>This document obsoletes portions of RFC 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="99"/>
  <seriesInfo name="RFC" value="9112"/>
  <seriesInfo name="DOI" value="10.17487/RFC9112"/>
</reference>
<reference anchor="RFC8417">
  <front>
    <title>Security Event Token (SET)</title>
    <author fullname="P. Hunt" initials="P." role="editor" surname="Hunt"/>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="W. Denniss" initials="W." surname="Denniss"/>
    <author fullname="M. Ansari" initials="M." surname="Ansari"/>
    <date month="July" year="2018"/>
    <abstract>
      <t>This specification defines the Security Event Token (SET) data structure. A SET describes statements of fact from the perspective of an issuer about a subject. These statements of fact represent an event that occurred directly to or about a security subject, for example, a statement about the issuance or revocation of a token on behalf of a subject. This specification is intended to enable representing security- and identity-related events. A SET is a JSON Web Token (JWT), which can be optionally signed and/or encrypted. SETs can be distributed via protocols such as HTTP.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8417"/>
  <seriesInfo name="DOI" value="10.17487/RFC8417"/>
</reference>

<reference anchor="SCIM Profile for Security Event Tokens" target="https://datatracker.ietf.org/doc/draft-ietf-scim-events">
  <front>
    <title>SCIM Profile for Security Event Tokens</title>
    <author initials="P." surname="Hunt" fullname="P. Hunt">
      <organization></organization>
    </author>
    <author initials="N." surname="Cam-Winget" fullname="N. Cam-Winget">
      <organization></organization>
    </author>
    <author initials="M." surname="Kiser" fullname="M. Kiser">
      <organization></organization>
    </author>
    <author initials="J." surname="Schreiber" fullname="J. Schreiber">
      <organization></organization>
    </author>
    <date year="2024" month="August"/>
  </front>
</reference>


    </references>

</references>


<?line 990?>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+19W3MbR5LuOyP4H2rlB5PHIGTJmvEMz8bEQpQ8ptc0tQB1
5uxOOE4UugtAjRpdmKpqUphgzG8/kZl17W5cKFK25CEfJBLormtWXr/MOjk5
OTwwltfl/+OVqsUps7oRhwelKmq+FKes1HxmTwqltZD8xBRyedIYcVJwI8zJ
188OD+RK40vGPv/66z9+/fzwwDTTpTRGqtquV+KUnb+++u7w4J1Y3yhdnrK/
ntdW6FrYk1fQ9oBNzs4vfj48uFH63VyrZnWKnxweHB4U3J4yWc/U4YGVthKn
7MvJ2lixZDOl2ZlWxpyUasllzc5LUVtp1+yC13wulqK2p+yVmMlaWqlqM2CX
10JfS3EzYGeqLsTKmgHjdcnG4u+N1PiG+fLwgE+nWlxDT2fnF+ytEewM5vrl
4cGPvJ6fMlEfHvDGLpQ+PTw4YbRKb3hTKfaD0nPBzmitDg8YU3p+ys6kKRSj
cRv4VCy5rE7Zije4rP9RwAPDQi1hyrHFpag4eyXreSVCWxey0MqomYVeVkpz
mFvS5pcrfG1Y4mv/sfSPQ+tfQvO10ktu5bU4hbfG3509f/bsj6fwDSxz67tv
f//im+T3F/73Pz579nXy+3P/+x9ePPsWf8ele6PVTFYCt2oiikbD7ry+FrVl
V+qdqA0+yhizXM+FPWULa1fm9OnTkltuNS/eCT2Uws6GSs+flqp4SrQIHxEh
CmjM+FaIQPbr2r0T9hH/Cks/ZN83tW19+tOQnfHlyV9kPRft7y6G7D+lEbr1
8Q9DNikWWshp+KrkVpyy518/f3Hy9R8YbvjJCeNTAxO28PfVQhpWqqIBgmQr
ra5lKQwrU1JWjpSRfo2oRGFFyRojGJ5LpmbMLgS7w1lhR7Bwx0PGzi2r+Now
1VhsxGAjXxpWhFOzVKWo3OmZVerG/Sotk3VRNTDcMBb31XJVYT9IsNCUkaUg
8jVDvwxLWZZA7IcHX7Dz2mpVNgUR+NUHzYbN+FJWa1gOsxKFnMmCemR/ddT9
M47O/fXiZwZLL4yc16JkVrEltsi0MKrRBU2rZLLGhVnBjslCQPPSj2EZx2AX
3LJaUEtTwQq1XDY1DEGUjMPBNEw6VshoLsZtqL6WBSzdjbQL6FPTF8gdDeMG
+y/FjDeVTUZnmtVKaWj+CB7nNRPvraiNnMoKBwf7hgvIyxJpiVfh9ZTCjoe0
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
4P8DGM8C+QAiAQA=

-->

</rfc>

